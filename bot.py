import os
import logging
import telebot
import config
from telebot import types
from convert import Converter
from summarize import summarize

bot = telebot.TeleBot(config.BOT_TOKEN)

logging.basicConfig(level=logging.INFO,
                    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger()

user_states = {}
user_voice_texts = {}
mark = {}
count = {}

@bot.message_handler(commands=['start'])
def start(message: types.Message):
    name = message.chat.first_name if message.chat.first_name else 'No_name'
    count[message.chat.id] = 0
    logger.info(f'Chat {name} (ID: {message.chat.id}) started bot')
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add("–î–∞", "–ù–µ—Ç")
    welcome_mess = '–ü—Ä–∏–≤–µ—Ç! –•–æ—á–µ—à—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è?'
    bot.send_message(message.chat.id, welcome_mess, reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text == "–î–∞")
def handle_yes(message: types.Message):
    bot.send_message(
        message.chat.id,
        "–¢–∞–∫ –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        reply_markup=types.ReplyKeyboardRemove()
    )
    user_states[message.chat.id] = "waiting_name"

@bot.message_handler(func=lambda message: message.text == "–ù–µ—Ç")
def handle_no(message: types.Message):
    bot.send_message(
        message.chat.id,
        "–¢–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π –≥–æ–ª–æ—Å–æ–≤–æ–µ, —è —Ä–∞—Å—à–∏—Ñ—Ä—É—é!",
        reply_markup=types.ReplyKeyboardRemove()
    )
    user_states[message.chat.id] = message.chat.first_name if message.chat.first_name else 'No_name'

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "waiting_name")
def handle_name(message: types.Message):
    name = message.text.strip()
    user_states[message.chat.id] = name
    bot.send_message(message.chat.id, f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! –û—Ç–ø—Ä–∞–≤–ª—è–π –≥–æ–ª–æ—Å–æ–≤–æ–µ, —è —Ä–∞—Å—à–∏—Ñ—Ä—É—é!")

@bot.message_handler(commands=['help'])
def help(message: types.Message):
    help_mess = '–ó–∞–ø–∏—à–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —è —Ä–∞—Å—à–∏—Ñ—Ä—É—é!'
    bot.send_message(message.chat.id, help_mess)

@bot.message_handler(content_types=['voice'])
def get_audio_messages(message: types.Message):
    process_audio(message, file_ext=".ogg")

@bot.message_handler(content_types=['video_note'])
def get_video_messages(message: types.Message):
    process_audio(message, file_ext=".mp4")

def process_audio(message: types.Message, file_ext):
    file_id = message.voice.file_id if message.content_type == "voice" else message.video_note.file_id
    file_info = bot.get_file(file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    file_name = str(message.message_id) + file_ext

    with open(file_name, 'wb') as new_file:
        new_file.write(downloaded_file)

    converter = Converter(file_name)
    os.remove(file_name)
    try:
        count[message.chat.id] += 1
        if count[message.chat.id] == 5:
            bot.send_message(message.chat.id, '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 1 –º–µ—Å—è—ÜüóìÔ∏è –° –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ —Å–ø–∏—Å–∞–Ω–æ $3.99üí≥ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏!')
    except KeyError:
        pass

    message_text = converter.audio_to_text()
    if not message_text:
        bot.send_message(message.chat.id, "–ù–∏—á–µ–≥–æ –Ω–µ —Å–ª—ã—à—É, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞")
        return
    user_voice_texts[message.chat.id] = message_text

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add("–ü–æ–ª–Ω—ã–π —Ä–∞—Å—Å–∫–∞–∑", "–ö—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑")
    try:
        bot.send_message(message.chat.id, f"–ì–æ—Ç–æ–≤–æ! {user_states[message.chat.id]}, —Ç–µ–±–µ –ø–æ–ª–Ω—ã–π —Ä–∞—Å—Å–∫–∞–∑ –∏–ª–∏ –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑?", reply_markup=keyboard)
    except KeyError:
        bot.send_message(message.chat.id, f"–ì–æ—Ç–æ–≤–æ! –¢–µ–±–µ –ø–æ–ª–Ω—ã–π —Ä–∞—Å—Å–∫–∞–∑ –∏–ª–∏ –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑?", reply_markup=keyboard)

@bot.message_handler(func=lambda msg: msg.text in ["–ü–æ–ª–Ω—ã–π —Ä–∞—Å—Å–∫–∞–∑", "–ö—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑"])
def handle_choice(message: types.Message):
    text = user_voice_texts.get(message.chat.id)

    if message.text == "–ü–æ–ª–Ω—ã–π —Ä–∞—Å—Å–∫–∞–∑":
        bot.send_message(message.chat.id, text, reply_markup=types.ReplyKeyboardRemove())
    elif message.text == "–ö—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑":
        short_text = summarize(text)
        bot.send_message(message.chat.id, short_text, reply_markup=types.ReplyKeyboardRemove())

    try:
        if count[message.chat.id] == 4:
            bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–æ—à–µ–ª –∫ –∫–æ–Ω—Ü—É üòû')
    except KeyError:
        pass

    try:
        mark[message.chat.id]
    except KeyError:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.add('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')
        bot.send_message(message.chat.id, "–í–æ—Ç —á—Ç–æ —Ç–∞–º –≥–æ–≤–æ—Ä–∏–ª–æ—Å—å, —Ç–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∏, –Ω–∞—Å–∫–æ–ª—å–∫–æ —è —Ç–µ–±–µ –ø–æ–º–æ–≥ üòä", reply_markup=keyboard)

    user_voice_texts.pop(message.chat.id, None)

@bot.message_handler(func=lambda msg: msg.text in ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])
def get_mark(message: types.Message):
    bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –û—Ç–ø—Ä–∞–≤–ª—è–π –µ—â–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ, –µ—Å–ª–∏ –Ω–∞–¥–æ', reply_markup=types.ReplyKeyboardRemove())
    mark[message.chat.id] = message

@bot.message_handler(content_types=["text", "document", "photo",
    "sticker","video", "location", "contact",
    "new_chat_members", "left_chat_member", "new_chat_title",
    "new_chat_photo", "delete_chat_photo", "group_chat_created",
    "supergroup_chat_created", "channel_chat_created",
    "migrate_to_chat_id", "migrate_from_chat_id", "pinned_message"])
def get_text_message(message: types.Message):
    bot.send_message(message.chat.id, '–Ø —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è')


if __name__ == '__main__':
    logger.info('Starting bot')
    bot.polling(none_stop=True, timeout=111)