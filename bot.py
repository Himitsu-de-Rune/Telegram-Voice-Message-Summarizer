import os
import re
import logging
import telebot
import config
from telebot import types
from convert import Converter
from summarize import summarize

bot = telebot.TeleBot(config.BOT_TOKEN)

logging.basicConfig(level=logging.INFO,
                    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger()

user_states = {}
user_voice_texts = {}
user_mark = {}
user_count = {}
user_lang = {}
user_progress = {}
user_photos = {}

keys = [str(i) for i in range(1, 11)]

@bot.message_handler(commands=['start']) 
def start(message: types.Message): 
    name = message.chat.first_name if message.chat.first_name else 'No_name' 
    user_count[message.chat.id] = 0 
    user_progress[message.chat.id] = 0
    user_photos[message.chat.id] = ['photo1', 'photo2', 'photo3', 'photo4']
    logger.info(f'Chat {name} (ID: {message.chat.id}) started bot') 
    input_field = {'ru': '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é:', 'en': 'Use the menu:'}
    key_yes = {'ru': '–î–∞', 'en': 'Yes'}
    key_no = {'ru': '–ù–µ—Ç', 'en': 'No'}
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, 
                                         one_time_keyboard=True, 
                                         input_field_placeholder=input_field[get_lang(message)]) 
    keyboard.add(key_yes[get_lang(message)], key_no[get_lang(message)]) 
    welcome_mess = {'ru': '–ü—Ä–∏–≤–µ—Ç! –•–æ—á–µ—à—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è? (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)', 
                    'en': 'Hy! Would you like to introduce yourself? (optionaly)'} 
    bot.send_message(message.chat.id, welcome_mess[get_lang(message)], reply_markup=keyboard) 

@bot.message_handler(func=lambda message: message.text in ["–î–∞", "Yes"])
def handle_yes(message: types.Message):
    new_message = {'ru': "–¢–∞–∫ –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", 
                   'en': "So what's your name?"}
    bot.send_message( message.chat.id, 
                     new_message[get_lang(message)], 
                     reply_markup=types.ReplyKeyboardRemove() )
    user_states[message.chat.id] = "waiting_name"

@bot.message_handler(func=lambda message: message.text in ["–ù–µ—Ç", 'No'])
def handle_no(message: types.Message):
    new_message = {'ru': "–¢–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–π –≥–æ–ª–æ—Å–æ–≤–æ–µ, —è —Ä–∞—Å—à–∏—Ñ—Ä—É—é!", 
                   'en': "Then send a voice message, I will decipher!"}
    bot.send_message( message.chat.id, 
                     new_message[get_lang(message)], 
                     reply_markup=types.ReplyKeyboardRemove() )
    user_states[message.chat.id] = message.chat.first_name if message.chat.first_name else 'No_name'

@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == "waiting_name")
def handle_name(message: types.Message):
    name = message.text.strip()
    user_states[message.chat.id] = name
    new_message = {'ru': f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! –û—Ç–ø—Ä–∞–≤–ª—è–π –≥–æ–ª–æ—Å–æ–≤–æ–µ, —è —Ä–∞—Å—à–∏—Ñ—Ä—É—é!", 
                   'en': f"Nice to meet you, {name}! Send a voice message, I will decipher!"}
    bot.send_message(message.chat.id, 
                     new_message[get_lang(message)])

@bot.message_handler(commands=['help'])
def help(message: types.Message):
    help_mess = {'ru': '–†–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –∫–æ–º–∞–Ω–¥—ã /start (—Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å). –ó–∞—Ç–µ–º –ø–∏—à–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏–ª–∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è, —è —Ä–∞—Å—à–∏—Ñ—Ä—É—é! \n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: \n/start \n/help \n/heart \n/progress \n/ru \n/en',
                 'en': "It is recommended to start a dialogue with the /start command (resets progress). Then write and send voice or video messages, I will decipher! \nAvailable commands: \n/start \n/help \n/heart \n/progress \n/ru \n/en"}
    bot.send_message(message.chat.id, help_mess[get_lang(message)])

@bot.message_handler(commands=['heart'])
def help(message: types.Message):
    bot.send_photo(message.chat.id, open('photo1.jpg', 'rb'))
    if make_progress('photo1', message.chat.id):
            new_message = {'ru': f'–¢—ã –æ—Ç–∫—Ä—ã–ª {get_prog(message)}-—é –∫–∞—Ä—Ç–æ—á–∫—É.\n–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {draw_a_progress(get_prog(message), message)}', 
                           'en': f'You have opened the {get_prog(message)}-th card\nYour progress: {draw_a_progress(get_prog(message), message)}'}
            bot.send_message(message.chat.id, new_message[get_lang(message)])
            if get_prog(message) == 4:
                new_message = {'ru': '–ê —Ç—ã –Ω–µ –ø—Ä–æ–º–∞—Ö. –¢—ã –æ—Ç–∫—Ä—ã–ª –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏!', 
                               'en': "You're no slouch. You've opened all the cards!"}
                bot.send_message(message.chat.id, new_message[get_lang(message)])

@bot.message_handler(commands=['progress'])
def help(message: types.Message):
    if get_prog(message) == 0:
        mess = {'ru': '–¢—ã –µ—â–µ –Ω–µ –Ω–∞—à–µ–ª –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏', 
                'en': "You haven't found any cards yet"}
        bot.send_message(message.chat.id, mess[get_lang(message)])
    elif get_prog(message) == 1:
        mess = {'ru': f'–¢—ã –Ω–∞—à–µ–ª —Ç–æ–ª—å–∫–æ {get_prog(message)} –∫–∞—Ä—Ç–æ—á—É\n–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {draw_a_progress(get_prog(message), message)}', 
                'en': f"You found only {get_prog(message)} card\nYou're progress: {draw_a_progress(get_prog(message), message)}"}
        bot.send_message(message.chat.id, mess[get_lang(message)])
    elif get_prog(message) in (2, 3):
        mess = {'ru': f'–¢—ã –Ω–∞—à–µ–ª {get_prog(message)} –∫–∞—Ä—Ç–æ—á–∏\n–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {draw_a_progress(get_prog(message), message)}', 
                'en': f"You found {get_prog(message)} cards\nYou're progress: {draw_a_progress(get_prog(message), message)}"}
        bot.send_message(message.chat.id, mess[get_lang(message)])
    elif get_prog(message) >= 4:
        mess = {'ru': '–¢—ã –Ω–∞—à–µ–ª –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏!', 
                'en': "You found all cards!"}
        bot.send_message(message.chat.id, mess[get_lang(message)])

def get_prog(message: types.Message) -> int:
    return user_progress.get(message.chat.id, 0)

def get_lang(message: types.Message) -> str:
    return user_lang.get(message.chat.id, 'ru')

@bot.message_handler(commands=['ru'])
def set_ru(message: types.Message):
    user_lang[message.chat.id] = 'ru'
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≥–æ–≤–æ—Ä–∏–º –ø–æ-—Ä—É—Å—Å–∫–∏")

@bot.message_handler(commands=['en'])
def set_en(message: types.Message):
    user_lang[message.chat.id] = 'en'
    bot.send_message(message.chat.id, "Let's speak English")

@bot.message_handler(content_types=['voice'])
def get_audio_messages(message: types.Message):
    process_audio(message, file_ext=".ogg")

@bot.message_handler(content_types=['video_note'])
def get_video_messages(message: types.Message):
    process_audio(message, file_ext=".mp4")

def process_audio(message: types.Message, file_ext):
    file_id = message.voice.file_id if message.content_type == "voice" else message.video_note.file_id
    duration = message.voice.duration if message.content_type == "voice" else message.video_note.duration
    file_info = bot.get_file(file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    file_name = str(message.message_id) + file_ext

    if duration > 200:
        mess = {'ru': '–¢–∞–∫–æ–µ –±–æ–ª—å—à–æ–µ, –ø—Ä–∏–¥–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å', 
                'en': "So big, we'll have to wait"}
        bot.send_photo(message.chat.id, open('photo4.jpg', 'rb'), mess[get_lang(message)])
        if make_progress('photo4', message.chat.id):
            mess = {'ru': f'–¢—ã –æ—Ç–∫—Ä—ã–ª {get_prog(message)}-—é –∫–∞—Ä—Ç–æ—á–∫—É.\n–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {draw_a_progress(get_prog(message), message)}', 
                   'en': f'You have opened the {get_prog(message)}-th card\nYour progress: {draw_a_progress(get_prog(message), message)}'}
            bot.send_message(message.chat.id, mess[get_lang(message)])
            if get_prog(message) == 4:
                mess = {'ru': '–ê —Ç—ã –Ω–µ –ø—Ä–æ–º–∞—Ö. –¢—ã –æ—Ç–∫—Ä—ã–ª –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏!', 
                        'en': "You're no slouch. You've opened all the cards!"}
                bot.send_message(message.chat.id, mess[get_lang(message)])

    elif duration > 50:
        mess = {'ru': '–°–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª—å—à–æ–µ, –ø—Ä–∏–¥–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å', 
                'en': "Message's bis, we'll have to wait"}
        bot.send_message(message.chat.id, mess[get_lang(message)])

    with open(file_name, 'wb') as new_file:
        new_file.write(downloaded_file)

    converter = Converter(file_name)
    os.remove(file_name)
    try:
        user_count[message.chat.id] += 1
        if user_count[message.chat.id] == 5:
            mess = {'ru': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ 1 –º–µ—Å—è—ÜüóìÔ∏è –° –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã —Å–ø–∏—Å–∞–Ω–æ $3.99üí≥ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—Ç–µ—Å—å —Å –Ω–∞–º–∏!',
                    'en': "Automatic renewal of subscription for 1 monthüóìÔ∏è $3.99 is written from your cardüí≥ Thank you for staying with us!"}
            bot.send_message(message.chat.id, mess[get_lang(message)])
        elif user_count[message.chat.id] == 10:
            mess = {'ru': '–¢–µ–±–µ –Ω–µ –Ω–∞–¥–æ–µ–ª–æ?', 'en': "Aren't you tired of this?"}
            bot.send_photo(message.chat.id, open('photo3.jpg', 'rb'), mess[get_lang(message)])
            if make_progress('photo3', message.chat.id):
                mess = {'ru': f'–¢—ã –æ—Ç–∫—Ä—ã–ª {get_prog(message)}-—é –∫–∞—Ä—Ç–æ—á–∫—É.\n–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {draw_a_progress(get_prog(message), message)}', 
                        'en': f'You have opened the {get_prog(message)}-th card\nYour progress: {draw_a_progress(get_prog(message), message)}'}
                bot.send_message(message.chat.id, mess[get_lang(message)])
                if get_prog(message) == 4:
                    mess = {'ru': '–ê —Ç—ã –Ω–µ –ø—Ä–æ–º–∞—Ö. –¢—ã –æ—Ç–∫—Ä—ã–ª –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏!', 
                            'en': "You're no slouch. You've opened all the cards!"}
                    bot.send_message(message.chat.id, mess[get_lang(message)])
    except KeyError:
        user_count[message.chat.id] = 1

    message_text = converter.audio_to_text()
    user_voice_texts[message.chat.id] = message_text

    if not message_text:
        mess = {'ru': '–ù–∏—á–µ–≥–æ –Ω–µ —Å–ª—ã—à—É, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞', 
                'en': "I can't hear anything, try again"}
        bot.send_message(message.chat.id, mess[get_lang(message)])
        return
    if has_english(message_text):
        mess = {'ru': '–û, –í—ã –∏–∑ –ê–Ω–≥–ª–∏–∏?', 
                'en': "Oh, aren't You from England?"}
        bot.send_message(message.chat.id, mess[get_lang(message)])
    
    if duration > 5:
        input_field = {'ru': '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é:', 'en': 'Use the menu:'}
        key_1 = {'ru': '–ü–æ–ª–Ω—ã–π —Ä–∞—Å—Å–∫–∞–∑', 'en': 'Full story'}
        key_2 = {'ru': '–ö—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑', 'en': 'Brief summary'}
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, 
                                             one_time_keyboard=True, 
                                             input_field_placeholder=input_field[get_lang(message)]) 
        keyboard.add(key_1[get_lang(message)], key_2[get_lang(message)]) 
        try:
            mess = {'ru': f"–ì–æ—Ç–æ–≤–æ! {user_states[message.chat.id]}, —Ç–µ–±–µ –ø–æ–ª–Ω—ã–π —Ä–∞—Å—Å–∫–∞–∑ –∏–ª–∏ –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑?", 
                    'en': f'Ready! {user_states[message.chat.id]}, you want the full story or a brief summary?'}
            bot.send_message(message.chat.id, mess[get_lang(message)], reply_markup=keyboard)
        except KeyError:
            mess = {'ru': f"–ì–æ—Ç–æ–≤–æ! –¢–µ–±–µ –ø–æ–ª–Ω—ã–π —Ä–∞—Å—Å–∫–∞–∑ –∏–ª–∏ –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑?", 
                    'en': f'Ready! You want the full story or a brief summary?'}
            bot.send_message(message.chat.id, mess[get_lang(message)], reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id, message_text, reply_markup=types.ReplyKeyboardRemove())

        if user_count[message.chat.id] >= 3:
            try:
                user_mark[message.chat.id]
            except KeyError:
                input_field = {'ru': '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É:', 'en': 'Select rating:'}
                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, 
                                                     one_time_keyboard=True,
                                                     input_field_placeholder=input_field[get_lang(message)])
                keyboard.add('1','2','3','4','5','6','7','8','9','10', row_width=5)
                mess = {'ru': "–í–æ—Ç —á—Ç–æ —Ç–∞–º –≥–æ–≤–æ—Ä–∏–ª–æ—Å—å, —Ç–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∏, –Ω–∞—Å–∫–æ–ª—å–∫–æ —è —Ç–µ–±–µ –ø–æ–º–æ–≥ üòä", 
                        'en': "That's what it said, now rate how much I helped you üòä"}
                bot.send_message(message.chat.id, mess[get_lang(message)], reply_markup=keyboard)

        if user_count[message.chat.id] % 8 == 0 and user_mark[message.chat.id] > 0:
                input_field = {'ru': '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é:', 'en': 'Use the menu:'}
                key_1 = {'ru': '–•–æ—á—É', 'en': "Let's change"}
                key_2 = {'ru': '–ù–µ —Ö–æ—á—É', 'en': "I wouldn't"}
                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, 
                                                     one_time_keyboard=True, 
                                                     input_field_placeholder=input_field[get_lang(message)]) 
                keyboard.add(key_1[get_lang(message)], key_2[get_lang(message)])
                mess = {'ru': '–ù–µ —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –æ—Ü–µ–Ω–∫—É?', 
                        'en': "Would you want to change your rating?"}
                bot.send_message(message.chat.id, mess[get_lang(message)], reply_markup=keyboard)

        if user_count[message.chat.id] == 4:
            mess = {'ru': '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–æ—à–µ–ª –∫ –∫–æ–Ω—Ü—É üòû',
                    'en': "Unfortunately, the free trial period has ended üòû"}
            bot.send_message(message.chat.id, mess[get_lang(message)])

@bot.message_handler(func=lambda msg: msg.text in ["–ü–æ–ª–Ω—ã–π —Ä–∞—Å—Å–∫–∞–∑", "–ö—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑", "Full story", "Brief summary"])
def handle_choice(message: types.Message):
    text = user_voice_texts.get(message.chat.id)

    if text:
        if message.text in ["–ü–æ–ª–Ω—ã–π —Ä–∞—Å—Å–∫–∞–∑", "Full story"]:
            bot.send_message(message.chat.id, text, reply_markup=types.ReplyKeyboardRemove())
        elif message.text in ["–ö—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑", "Brief summary"]:
            short_text = summarize(text)
            if len(short_text) > int(len(text) * 1.2):
                mess = {'ru': '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –õ—É—á—à–µ –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é',
                        'en': "Something went wrong... I'd better send you the full version"}
                bot.send_message(message.chat.id, mess[get_lang(message)])
                bot.send_message(message.chat.id, text, reply_markup=types.ReplyKeyboardRemove())
            else:
                bot.send_message(message.chat.id, short_text, reply_markup=types.ReplyKeyboardRemove())

        try:
            if user_count[message.chat.id] >= 3:
                try:
                    user_mark[message.chat.id]
                except KeyError:
                    input_field = {'ru': '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É:', 'en': 'Select rating:'}
                    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, 
                                                         one_time_keyboard=True,
                                                         input_field_placeholder=input_field[get_lang(message)])
                    keyboard.add('1','2','3','4','5','6','7','8','9','10', row_width=5)
                    mess = {'ru': "–í–æ—Ç —á—Ç–æ —Ç–∞–º –≥–æ–≤–æ—Ä–∏–ª–æ—Å—å, —Ç–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∏, –Ω–∞—Å–∫–æ–ª—å–∫–æ —è —Ç–µ–±–µ –ø–æ–º–æ–≥ üòä", 
                            'en': "That's what it said, now rate how much I helped you üòä"}
                    bot.send_message(message.chat.id, mess[get_lang(message)], reply_markup=keyboard)
                    
            if user_count[message.chat.id] % 8 == 0 and user_mark[message.chat.id] > 0:
                input_field = {'ru': '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é:', 'en': 'Use the menu:'}
                key_1 = {'ru': '–•–æ—á—É', 'en': "Let's change"}
                key_2 = {'ru': '–ù–µ —Ö–æ—á—É', 'en': "I wouldn't"}
                keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, 
                                                     one_time_keyboard=True, 
                                                     input_field_placeholder=input_field[get_lang(message)]) 
                keyboard.add(key_1[get_lang(message)], key_2[get_lang(message)])
                mess = {'ru': '–ù–µ —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å –æ—Ü–µ–Ω–∫—É?', 
                        'en': "Would you want to change your rating?"}
                bot.send_message(message.chat.id, mess[get_lang(message)], reply_markup=keyboard)
        except:
            pass

    try:
        if user_count[message.chat.id] == 4:
            mess = {'ru': '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–æ—à–µ–ª –∫ –∫–æ–Ω—Ü—É üòû',
                    'en': "Unfortunately, the free trial period has ended üòû"}
            bot.send_message(message.chat.id, mess[get_lang(message)])
    except KeyError:
        pass

    user_voice_texts.pop(message.chat.id, None)

@bot.message_handler(func=lambda msg: msg.text in ['–•–æ—á—É', "Let's change"])
def suggest_to_evaluate(message: types.Message):
    try:
        input_field = {'ru': '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É:', 'en': 'Select rating:'}
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, 
                                             one_time_keyboard=True,
                                             input_field_placeholder=input_field[get_lang(message)])
        keyboard.add('1','2','3','4','5','6','7','8','9','10', row_width=5)
        mess = {'ru': "–í–æ—Ç —á—Ç–æ —Ç–∞–º –≥–æ–≤–æ—Ä–∏–ª–æ—Å—å, —Ç–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∏, –Ω–∞—Å–∫–æ–ª—å–∫–æ —è —Ç–µ–±–µ –ø–æ–º–æ–≥ üòä", 
                'en': "That's what it said, now rate how much I helped you üòä"}
        bot.send_message(message.chat.id, mess[get_lang(message)], reply_markup=keyboard)
    except:
        pass

@bot.message_handler(func=lambda msg: msg.text in ['–ù–µ —Ö–æ—á—É', "I wouldn't"])
def suggest_to_evaluate(message: types.Message):
    pass
    
@bot.message_handler(func=lambda msg: msg.text in keys)
def get_mark(message: types.Message):
    if message.text == '10':
        mess = {'ru': '–°–ø–∞—Å–∏–±–æ –∑–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É!', 
                'en': "Thank you for the maximum rating!"}
        bot.send_photo(message.chat.id, open('photo2.jpg', 'rb'), mess[get_lang(message)])
        if make_progress('photo2', message.chat.id):
            mess = {'ru': f'–¢—ã –æ—Ç–∫—Ä—ã–ª {get_prog(message)}-—é –∫–∞—Ä—Ç–æ—á–∫—É.\n–¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {draw_a_progress(get_prog(message), message)}', 
                   'en': f'You have opened the {get_prog(message)}-th card\nYour progress: {draw_a_progress(get_prog(message), message)}'}
            bot.send_message(message.chat.id, mess[get_lang(message)])
            if get_prog(message) == 4:
                mess = {'ru': '–ê —Ç—ã –Ω–µ –ø—Ä–æ–º–∞—Ö. –¢—ã –æ—Ç–∫—Ä—ã–ª –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏!', 
                        'en': "You're no slouch. You've opened all the cards!"}
                bot.send_message(message.chat.id, mess[get_lang(message)])
    else:
        mess = {'ru': '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –û—Ç–ø—Ä–∞–≤–ª—è–π –µ—â–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ, –µ—Å–ª–∏ –Ω–∞–¥–æ', 
                'en': "Thanks for the rating! Send more voicemails if needed"}
        bot.send_message(message.chat.id, mess[get_lang(message)], reply_markup=types.ReplyKeyboardRemove())
    user_mark[message.chat.id] = int(message.text)

@bot.message_handler(content_types=["text", "document", "photo",
    "sticker","video", "location", "contact",
    "new_chat_members", "left_chat_member", "new_chat_title",
    "new_chat_photo", "delete_chat_photo", "group_chat_created",
    "supergroup_chat_created", "channel_chat_created",
    "migrate_to_chat_id", "migrate_from_chat_id", "pinned_message"])
def get_text_message(message: types.Message):
    mess = {'ru': '–Ø —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤—ã–µ –∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è', 
            'en': "I only transcribe voice and video messages"}
    bot.send_message(message.chat.id, mess[get_lang(message)])

def has_english(text: str) -> bool:
    return bool(re.search(r"[A-Za-z]", text))

def get_photos(chat_id: int) -> set:
    return user_photos.get(chat_id, None)

def make_progress(photo_name: str, chat_id: int) -> bool:
    if get_photos(chat_id) == None:
        return True
    elif photo_name in get_photos(chat_id):
        user_progress[chat_id] += 1
        get_photos(chat_id)[int(photo_name[5])-1] = ''
        return True
    return False

def draw_a_progress(progress: int, message: types.Message) -> str:
    paint = []
    paint.append('[')
    if progress == 0:
        mess = {'ru': '–ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è —Å –ø–æ–º–æ—â—å—é /start –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞', 
                'en': "Login with /start to display progress"}
        paint.append(mess[get_lang(message)])
    elif progress in [1, 2, 3]:
        for _ in range(progress * 3 - 1):
            paint.append('‚Äî')
        paint.append('‚óè')
        for _ in range(11 - progress * 3):
            paint.append('. . ')
    elif progress == 4:
        for _ in range(12):
            paint.append('‚Äî')
    paint.append(']')
    return ''.join(paint)


if __name__ == '__main__':
    logger.info('Starting bot')
    bot.polling(none_stop=True, timeout=111)
